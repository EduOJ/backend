package controller_test

import (
	"bytes"
	"encoding/base64"
	"github.com/leoleoasd/EduOJBackend/app/response"
	"github.com/leoleoasd/EduOJBackend/base"
	"github.com/leoleoasd/EduOJBackend/database/models"
	"github.com/minio/minio-go"
	"github.com/stretchr/testify/assert"
	"io"
	"mime/multipart"
	"net/http/httptest"
	"strings"
	"testing"
)

func TestCreateImage(t *testing.T) {
	t.Parallel()
	// base64_encoded image for testing.
	b64 := `iVBORw0KGgoAAAANSUhEUgAAAhwAAAECCAYAAAC1yg4KAAAAAXNSR0IArs4c6QAAQABJREFUeAHtnQe8FcXZxuXeCyJVUFSwARbsDY2aqIklYu9EjSVGDJbPfLYYGxpjiTFq1NiSaBT1s8Xea9RgF3tDxQ42VEABBYHL9zzLea7Dcs65u3vKPffeZ36/OTO7O+Wd/055d3Z2zgIL2JiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZiACZhAWyXQoa0WzOUygXZMIGm7nlNlRknkqrZMVUbg7Eyg/RJI0gG0XzouuQm0HgJhW5ZfbrwUHNTjA3v8OB4ny3E8fx3LDdNU/nJ5LfSHYe03ARNohQTyNfxWWAyLbALtlkDYhumnrcu5uiaXA3ghi0uRKdcgrzzpFrK5LAvKJFnkKrxdEzCBVkhAnUIrFN0im0C7JhC2XfqpZDTZJ598crmll1569e7du6/asWPH3rNnz548a9asSd99991HF1544X/OOOOMqQjfGFgpIjhV0syC5KIrG8nVp0+fhieeeGKDRRZZZPW6urpeDQ0NvRBm9rfffjvmiy++eG3EiBGv33bbbdNxTnJJJikcchHExgRMwARMwARMoNIEwoG8Hpl1hO08bNiw3p9//vlB33///ctzipjGxsZpGORvfuedd7ZGvC6wC8I2wMZnRnAqlYnL1QmxF7r//vtXmjJlyoVQesYXEWsOrk+YPHnymbfffvvyjAfL+OWQC8nYmIAJmIAJmIAJpCEQDuocjDkod4HysBMG7E+LDej5rk2dOvWqCy64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cqZZa2mJfVq5WopNVnnTlo/hSyljNeXMUrayxSkFUtmEcEIm0M4JhO2Q/rjlgEyj83OP5v1VpxW6zfmZgsIotfixzqdxw/Ions6FbhK/4oeuZKQrK+UjvKY4OqdjuyZgAi1AQA2+BbJ2liZgAjEC8fbIY52TG4sy32E4uBbyK1J4Xecq5eaTPzxXyF9MHskfdxlH54rF9zUTMIEqEggbeRWzdVYmYALNEGiubfJ60kE1abhmRKrI5ebKqUyTlLeWy6ly2DUBEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzABEzCBFiXw/3qoR/VTexpWAAAAAElFTkSuQmCC`

	t.Run("testCreateImageNoFile", func(t *testing.T) {
		var b bytes.Buffer
		w := multipart.NewWriter(&b)
		w.Close()
		req := httptest.NewRequest("POST", "/api/image", &b)
		req.Header.Set("Set-User-For-Test", applyNormalUser["Set-User-For-Test"][0])
		req.Header.Set("Content-Type", w.FormDataContentType())
		httpResp := makeResp(req)
		resp := response.CreateImageResponse{}
		mustJsonDecode(httpResp, &resp)
		assert.Equal(t, "INTERNAL_ERROR", resp.Message)
		assert.Equal(t, 500, httpResp.StatusCode)
	})

	t.Run("testCreateImageIllegalType", func(t *testing.T) {
		b64 := `aaaaaaa`
		var b bytes.Buffer
		w := multipart.NewWriter(&b)
		fw, err := w.CreateFormFile("file", "baidu.png")
		assert.Nil(t, err)
		_, err = io.Copy(fw, base64.NewDecoder(base64.RawStdEncoding, strings.NewReader(b64)))
		assert.Nil(t, err)
		w.Close()
		req := httptest.NewRequest("POST", "/api/image", &b)
		req.Header.Set("Set-User-For-Test", applyNormalUser["Set-User-For-Test"][0])
		req.Header.Set("Content-Type", w.FormDataContentType())
		httpResp := makeResp(req)
		resp := response.CreateImageResponse{}
		mustJsonDecode(httpResp, &resp)
		assert.Equal(t, "ILLEGAL_TYPE", resp.Message)
		assert.Nil(t, resp.Error)
		assert.Equal(t, 403, httpResp.StatusCode)
	})

	t.Run("testCreateImageIllegalFileExtension", func(t *testing.T) {
		var b bytes.Buffer
		w := multipart.NewWriter(&b)
		fw, err := w.CreateFormFile("file", "baidu.jpg")
		assert.Nil(t, err)
		_, err = io.Copy(fw, base64.NewDecoder(base64.RawStdEncoding, strings.NewReader(b64)))
		assert.Nil(t, err)
		w.Close()
		req := httptest.NewRequest("POST", "/api/image", &b)
		req.Header.Set("Set-User-For-Test", applyNormalUser["Set-User-For-Test"][0])
		req.Header.Set("Content-Type", w.FormDataContentType())
		httpResp := makeResp(req)
		resp := response.CreateImageResponse{}
		mustJsonDecode(httpResp, &resp)
		assert.Equal(t, "ILLEGAL_TYPE", resp.Message)
		assert.Nil(t, resp.Error)
		assert.Equal(t, 403, httpResp.StatusCode)
	})

	t.Run("testCreateImageSuccess", func(t *testing.T) {
		t.Parallel()

		var b bytes.Buffer
		w := multipart.NewWriter(&b)
		fw, err := w.CreateFormFile("file", "baidu.png")
		assert.Nil(t, err)
		_, err = io.Copy(fw, base64.NewDecoder(base64.RawStdEncoding, strings.NewReader(b64)))
		assert.Nil(t, err)
		w.Close()
		req := httptest.NewRequest("POST", "/api/image", &b)
		req.Header.Set("Set-User-For-Test", applyNormalUser["Set-User-For-Test"][0])
		req.Header.Set("Content-Type", w.FormDataContentType())
		httpResp := makeResp(req)
		resp := response.CreateImageResponse{}
		mustJsonDecode(httpResp, &resp)
		assert.Equal(t, 201, httpResp.StatusCode)
		assert.Equal(t, "SUCCESS", resp.Message)
		assert.Nil(t, resp.Error)
		sepPath := strings.Split(*resp.Data.FilePath, "/")
		assert.Equal(t, "/api/image/", (*resp.Data.FilePath)[:11])
		assert.Equal(t, 4, len(sepPath))

		imageModel := models.Image{}
		base.DB.Model(models.Image{}).Where("file_path = ?", sepPath[len(sepPath)-1]).Find(&imageModel)
		assert.Equal(t, imageModel.Filename, "baidu.png")
		o, err := base.Storage.GetObject("images", sepPath[len(sepPath)-1], minio.GetObjectOptions{})
		assert.Nil(t, err)
		buf := bytes.Buffer{}
		_, err = io.Copy(&buf, o)
		assert.Nil(t, err)
		imgBuf := bytes.Buffer{}
		io.Copy(&imgBuf, base64.NewDecoder(base64.RawStdEncoding, strings.NewReader(b64)))
		assert.Equal(t, imgBuf.Bytes(), buf.Bytes())
	})
}
